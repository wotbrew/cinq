- predicates can be moved around, program defensively
  Normally this is fine, but occasionally one predicate may imply indirectly the nil safety of another. In this example, the programmer knows if a is a string, b cannot be nil.
    e.g (and (string? a) (= "fr" (subs b 0 2)))
  in cinq predicate push down can push the b independently of a. this might cause a NPE as a surprise.
  one should write predicates with the assumption they can be moved:

    (and (string? a) b (= "fr" (subs b 0 2)))
    will work as long as our engine guarantees ordering of predicates with the same dependencies.

    (and (string? a) (when b (= "fr" (subs b 0 2)))

   alternatively we could decide to evaluate clojure functions only if their column dependencies are not null (perhaps can be overridden).


Here is a query that crashes if pushdown is on:

(q [a [1, 2, 3]
    b [{:a 1 :s "he"}, {:a 2 :s nil}, {:a 3 :s "fr"}]
    :when (and (= a b:a) (not= a 2) (= "fr" (subs b:s 0 2)))])

 note that the following works fine:

(q [a [1, 2, 3]
    b [{:a 1 :s "he"}, {:a 2 :s nil}, {:a 3 :s "fr"}]
    :when (and (= a b:a) (not= a 2) b:s (= "fr" (subs b:s 0 2)))])

- left-join boxes right cols
